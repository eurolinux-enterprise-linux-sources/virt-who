diff -up virt-who-0.12/virtwho.py.fix virt-who-0.12/virtwho.py
--- virt-who-0.12/virtwho.py.fix	2016-02-25 13:07:36.622871640 +0100
+++ virt-who-0.12/virtwho.py	2016-02-25 13:07:47.964761132 +0100
@@ -42,6 +42,10 @@ class ReloadRequest(Exception):
     ''' Reload of virt-who was requested by sending SIGHUP signal. '''
 
 
+class RateLimitExceeded(Exception):
+    pass
+
+
 class OptionParserEpilog(OptionParser):
     """ Epilog is new in Python 2.5, we need to support Python 2.4. """
     def __init__(self, usage="%prog [options]", description=None, epilog=None):
@@ -64,6 +68,8 @@ class OptionParserEpilog(OptionParser):
 RetryInterval = 60 # One minute
 # Default interval for sending list of UUIDs
 DefaultInterval = 3600 # Once per hour
+# How long we should wait after receiving 429 error, it increase for each 429 error
+RateLimitRetry = 60
 
 PIDFILE = "/var/run/virt-who.pid"
 SAT5 = "satellite"
@@ -83,6 +89,7 @@ class VirtWho(object):
         self.options = options
         self.terminate_event = Event()
         self.queue = None
+        self._429_count = 0
 
         self.configManager = ConfigManager(config_dir)
         for config in self.configManager.configs:
@@ -119,6 +126,8 @@ class VirtWho(object):
             self.logger.exception("Error in communication with subscription manager:")
             return False
         except Exception as e:
+            if getattr(e, 'code', None) == 429:
+                raise RateLimitExceeded()
             exceptionCheck(e)
             self.logger.exception("Error in communication with subscription manager:")
             return False
@@ -152,7 +161,7 @@ class VirtWho(object):
 
         # Queue for getting events from virt backends
         if self.queue is None:
-            self.queue = Queue(len(self.configManager.configs))
+            self.queue = Queue()
 
         # Run the virtualization backends
         self.virts = []
@@ -192,7 +201,7 @@ class VirtWho(object):
             # Send the report
             if not self.options.print_ and not isinstance(report, ErrorReport):
                 try:
-                    self.send(report)
+                    self.send_report(report)
                 except ManagerFatalError:
                     # System not register (probably), stop the backends
                     for virt in self.virts:
@@ -221,6 +230,35 @@ class VirtWho(object):
         if self.options.print_:
             return result
 
+    def send_report(self, report):
+        reports = []
+        while True:
+            try:
+                if self.send(report):
+                    self._429_count = 0
+                break
+            except RateLimitExceeded:
+                self._429_count += 1
+                wait_time = RateLimitRetry * self._429_count
+                self.logger.warn("Rate limit of subscription manager exceeded, reporting delayed by %s seconds", wait_time)
+
+                # Wait for some time before retrying, read and store reports meantime
+                wait_until = time.time() + wait_time
+                reports.append(report)
+                while True:
+                    wait = wait_until - time.time()
+                    try:
+                        r = self.queue.get(block=True, timeout=max(0, wait))
+                    except Empty:
+                        break
+                    if r in ['exit', 'reload']:
+                        self.queue.put(r)
+                        return
+                    reports.append(r)
+        # Reinsert stored report to the queue
+        for report in reports:
+            self.queue.put(report)
+
     def terminate(self):
         self.logger.debug("virt-who shut down started")
         if self.queue:
