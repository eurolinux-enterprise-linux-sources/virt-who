commit 2bfc6cf2d6c5a65bd63de11d0e2eb8bd44ea5cca
Author: Radek Novacek <rnovacek@redhat.com>
Date:   Thu Jan 28 10:06:02 2016 +0100

    Improve logging
    
    Make non-debug logging less verbose. Also add config name to some
    logging messages.

diff --git a/manager/satellite/satellite.py b/manager/satellite/satellite.py
index f618d78..e45f432 100644
--- a/manager/satellite/satellite.py
+++ b/manager/satellite/satellite.py
@@ -76,7 +76,7 @@ class Satellite(Manager):
         except Exception:
             self.logger.exception("Unable to connect to the Satellite server")
             raise SatelliteError("Unable to connect to the Satellite server")
-        self.logger.info("Initialized satellite connection")
+        self.logger.debug("Initialized satellite connection")
 
     def _load_hypervisor(self, hypervisor_uuid, type):
         systemid_filename = self.HYPERVISOR_SYSTEMID_FILE % hypervisor_uuid
@@ -173,6 +173,8 @@ class Satellite(Manager):
                 self.logger.exception("Unable to send host/guest association to the satellite:")
                 raise SatelliteError("Unable to send host/guest association to the satellite: %s" % str(e))
 
+        self.logger.info("Mapping for config \"%s\" updated", report.config.name)
+
         # TODO: figure out what to populate here
         result = {}
         for type in ['failedUpdate', 'created', 'updated']:
diff --git a/manager/subscriptionmanager/subscriptionmanager.py b/manager/subscriptionmanager/subscriptionmanager.py
index 5eadf2e..336a9df 100644
--- a/manager/subscriptionmanager/subscriptionmanager.py
+++ b/manager/subscriptionmanager/subscriptionmanager.py
@@ -142,7 +142,10 @@ class SubscriptionManager(Manager):
         guests.sort(key=lambda item: item.uuid)
 
         serialized_guests = [guest.toDict() for guest in guests]
-        self.logger.info("Sending domain info: %s", json.dumps(serialized_guests, indent=4))
+        self.logger.info('Sending update in guests lists for config '
+                         '"%s": %d guests found',
+                         report.config.name, len(guests))
+        self.logger.debug("Domain info: %s", json.dumps(serialized_guests, indent=4))
 
         # Send list of guest uuids to the server
         try:
@@ -177,7 +180,9 @@ class SubscriptionManager(Manager):
 
         hypervisor_count = len(mapping['hypervisors'])
         guest_count = sum(len(hypervisor.guestIds) for hypervisor in mapping['hypervisors'])
-        self.logger.info("Sending update in hosts-to-guests mapping: %d hypervisors and %d guests found", hypervisor_count, guest_count)
+        self.logger.info('Sending update in hosts-to-guests mapping for config '
+                         '"%s": %d hypervisors and %d guests found',
+                         report.config.name, hypervisor_count, guest_count)
         self.logger.debug("Host-to-guest mapping: %s", json.dumps(serialized_mapping, indent=4))
         try:
             try:
@@ -224,16 +229,17 @@ class SubscriptionManager(Manager):
                     self.logger.error("Error during update list of guests: %s", str(fail))
             for updated in resultData['updated']:
                 guests = [x['guestId'] for x in updated['guestIds']]
-                self.logger.info("Updated host %s with guests: [%s]",
-                                 updated['uuid'],
-                                 ", ".join(guests))
+                self.logger.debug("Updated host %s with guests: [%s]",
+                                  updated['uuid'],
+                                  ", ".join(guests))
             if (isinstance(result['created'], list)):
                 for created in result['created']:
                     guests = [x['guestId'] for x in created['guestIds']]
-                    self.logger.info("Created host: %s with guests: [%s]",
-                                     created['uuid'],
-                                     ", ".join(guests))
-            self.logger.info("Number of mappings unchanged: %d", len(resultData['unchanged']))
+                    self.logger.debug("Created host: %s with guests: [%s]",
+                                      created['uuid'],
+                                      ", ".join(guests))
+            self.logger.debug("Number of mappings unchanged: %d", len(resultData['unchanged']))
+            self.logger.info("Mapping for config \"%s\" updated", report.config.name)
 
     def uuid(self):
         """ Read consumer certificate and get consumer UUID from it. """
diff --git a/virt/libvirtd/libvirtd.py b/virt/libvirtd/libvirtd.py
index d3a0ede..0d34b83 100644
--- a/virt/libvirtd/libvirtd.py
+++ b/virt/libvirtd/libvirtd.py
@@ -225,13 +225,11 @@ class Libvirtd(virt.Virt):
                     # Don't send Domain-0 on xen (zeroed uuid)
                     continue
                 domains.append(LibvirtdGuest(self, domain))
-                self.logger.debug("Virtual machine found: %s: %s", domain.name(), domain.UUIDString())
 
             # Non active domains
             for domainName in self.virt.listDefinedDomains():
                 domain = self.virt.lookupByName(domainName)
                 domains.append(LibvirtdGuest(self, domain))
-                self.logger.debug("Virtual machine found: %s: %s", domainName, domain.UUIDString())
         except libvirt.libvirtError as e:
             self.virt.close()
             raise virt.VirtError(str(e))
diff --git a/virtwho.py b/virtwho.py
index a130b4d..84e8a21 100644
--- a/virtwho.py
+++ b/virtwho.py
@@ -221,7 +221,6 @@ class VirtWho(object):
     def _sendGuestList(self, report):
         manager = Manager.fromOptions(self.logger, self.options, report.config)
         manager.sendVirtGuests(report, self.options)
-        self.logger.info("virt-who guest list update successful")
 
     def _sendGuestAssociation(self, report):
         manager = Manager.fromOptions(self.logger, self.options, report.config)
@@ -300,7 +299,7 @@ class VirtWho(object):
                         self.logger.warn('Unable to collect report for config "%s"', report.config.name)
                 elif isinstance(report, AbstractVirtReport):
                     if self.last_reports_hash.get(report.config.name, None) == report.hash:
-                        self.logger.info('Report for config "%s" didn\'t change, not sending', report.config.name)
+                        self.logger.info('Report for config "%s" haven\'t changed, not sending', report.config.name)
                     else:
                         self.queued_reports[report.config.name] = report
                         if self.options.print_:
