commit f6bed0f683c287c6cbea262978db74c9875bc840
Author: Radek Novacek <rnovacek@redhat.com>
Date:   Tue Mar 17 12:59:36 2015 +0100

    Allow to identify hypervisors by other properties than UUID
    
    Hypervisors can be now identified by uuid, hostname, or hardware uuid.

diff --git a/config.py b/config.py
index b976621..b8807f8 100644
--- a/config.py
+++ b/config.py
@@ -60,6 +60,8 @@ class Config(object):
         self.filter_host_uuids = []
         self.exclude_host_uuids = []
 
+        self.hypervisor_id = 'uuid'
+
         # Optional options for backends
         self.filter_host_parents = []
         self.exclude_host_parents = []
@@ -126,6 +128,11 @@ class Config(object):
         config = Config(name, type, server, username, password, owner, env, rhsm_username, rhsm_password)
 
         try:
+            config.hypervisor_id = parser.get(name, "hypervisor_id")
+        except NoOptionError:
+            config.hypervisor_id = "uuid"
+
+        try:
             config.filter_host_uuids = parse_list(parser.get(name, "filter_host_uuids"))
         except NoOptionError:
             config.filter_host_uuids = []
diff --git a/virt-who-config.5 b/virt-who-config.5
index 3936648..3d8f883 100644
--- a/virt-who-config.5
+++ b/virt-who-config.5
@@ -42,6 +42,9 @@ Only hosts which uuid is specified in comma-separated list in this option will b
 .TP
 \fBexclude_host_uuids\fR
 Hosts which uuid is specified in comma-separated list in this option will \fBNOT\fR be reported. Put the uuid into the double-quotes if it contains special characters (like comma).
+.TP
+\fBhypervisor_id\fR
+Property that should be used as identification of the hypervisor. Can be one of following: \fBuuid\fR, \fBhostname\fR, \fBhwuuid\fR. Note that some virtualization backends don't have all of them implemented. Default is \fBuuid\fR. Applicable to esx, hyperv and rhevm only.
 
 .SH EXAMPLE
 [test-esx]
diff --git a/virt/esx/esx.py b/virt/esx/esx.py
index fc2588e..2292cec 100644
--- a/virt/esx/esx.py
+++ b/virt/esx/esx.py
@@ -142,7 +142,14 @@ class Esx(virt.Virt):
                 continue
 
             guests = []
-            uuid = host['hardware.systemInfo.uuid']
+            if self.config.hypervisor_id == 'uuid':
+                uuid = host['hardware.systemInfo.uuid']
+            elif self.config.hypervisor_id == 'hwuuid':
+                uuid = host_id
+            elif self.config.hypervisor_id == 'hostname':
+                uuid = host['name']
+            else:
+                raise virt.VirtError('Reporting of hypervisor %s is not implemented in %s backend' % (self.config.hypervisor_id, self.CONFIG_TYPE))
             mapping[uuid] = guests
             if not host['vm']:
                 continue
diff --git a/virt/hyperv/hyperv.py b/virt/hyperv/hyperv.py
index 4aa1692..0e00b3b 100644
--- a/virt/hyperv/hyperv.py
+++ b/virt/hyperv/hyperv.py
@@ -329,10 +329,19 @@ class HyperV(virt.Virt):
 
         for instance in hypervsoap.Pull(uuid):
             guests.append(HyperV.decodeWinUUID(instance["BIOSGUID"]))
-        uuid = hypervsoap.Enumerate("select UUID from Win32_ComputerSystemProduct", "root/cimv2")
-        host = None
-        for instance in hypervsoap.Pull(uuid, "root/cimv2"):
-            host = HyperV.decodeWinUUID(instance["UUID"])
+
+        if self.config.hypervisor_id == 'uuid':
+            uuid = hypervsoap.Enumerate("select UUID from Win32_ComputerSystemProduct", "root/cimv2")
+            host = None
+            for instance in hypervsoap.Pull(uuid, "root/cimv2"):
+                host = HyperV.decodeWinUUID(instance["UUID"])
+        elif self.config.hypervisor_id == 'hostname':
+            data = hypervsoap.Enumerate("select DNSHostName from Win32_ComputerSystem", "root/cimv2")
+            for instance in hypervsoap.Pull(data, "root/cimv2"):
+                host = instance["DNSHostName"]
+        else:
+            raise virt.VirtError('Reporting of hypervisor %s is not implemented in %s backend' % (self.config.hypervisor_id, self.CONFIG_TYPE))
+
         return {host: guests}
 
     def ping(self):
diff --git a/virt/rhevm/rhevm.py b/virt/rhevm/rhevm.py
index 2da373b..b8636c0 100644
--- a/virt/rhevm/rhevm.py
+++ b/virt/rhevm/rhevm.py
@@ -25,6 +25,8 @@ import base64
 
 import virt
 
+from config import Config
+
 # Import XML parser
 try:
     from elementtree import ElementTree
@@ -72,12 +74,21 @@ class RhevM(virt.Virt):
         }
         """
         mapping = {}
+        host_ids = {}
 
         hosts_xml = ElementTree.parse(self.get(self.hosts_url))
         vms_xml = ElementTree.parse(self.get(self.vms_url))
 
         for host in hosts_xml.findall('host'):
             id = host.get('id')
+            if self.config.hypervisor_id == 'uuid':
+                host_ids[id] = id
+            elif self.config.hypervisor_id == 'hwuuid':
+                host_ids[id] = host.find('hardware_information').find('uuid').text
+            elif self.config.hypervisor_id == 'hostname':
+                host_ids[id] = host.find('name').text
+            else:
+                raise virt.VirtError('Reporting of hypervisor %s is not implemented in %s backend' % (self.config.hypervisor_id, self.CONFIG_TYPE))
             mapping[id] = []
 
         for vm in vms_xml.findall('vm'):
@@ -93,7 +104,10 @@ class RhevM(virt.Virt):
             else:
                 mapping[host_id].append(guest_id)
 
-        return mapping
+        mapping_with_ids = {}
+        for host_id, vms in mapping.items():
+            mapping_with_ids[host_ids[host_id]] = vms
+        return mapping_with_ids
 
     def ping(self):
         return True
@@ -101,10 +115,11 @@ class RhevM(virt.Virt):
 if __name__ == '__main__':
     # TODO: read from config
     if len(sys.argv) < 4:
-        print "Usage: %s url username password"
+        print("Usage: %s url username password" % sys.argv[0])
         sys.exit(0)
 
     import logging
     logger = logging.Logger("")
-    rhevm = RhevM(logger, sys.argv[1], sys.argv[2], sys.argv[3])
+    config = Config('rhevm', 'rhevm', sys.argv[1], sys.argv[2], sys.argv[3])
+    rhevm = RhevM(logger, config)
     rhevm.getHostGuestMapping()
