commit 4073ea7495140b8ade88c6ad227e87f1f1b80c74
Author: Radek Novacek <rnovacek@redhat.com>
Date:   Tue Apr 21 13:58:47 2015 +0200

    Stop backends when system is not registered

diff --git a/manager/__init__.py b/manager/__init__.py
index 9e32913..e15c802 100644
--- a/manager/__init__.py
+++ b/manager/__init__.py
@@ -1,4 +1,4 @@
 
-from manager import Manager, ManagerError
+from manager import Manager, ManagerError, ManagerFatalError
 
-__all__ = ['Manager', 'ManagerError']
+__all__ = ['Manager', 'ManagerError', 'ManagerFatalError']
diff --git a/manager/manager.py b/manager/manager.py
index 5be4a7f..aa0b020 100644
--- a/manager/manager.py
+++ b/manager/manager.py
@@ -22,6 +22,8 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 class ManagerError(Exception):
     pass
 
+class ManagerFatalError(Exception):
+    pass
 
 class Manager(object):
     def sendVirtGuests(self, domains):
diff --git a/manager/subscriptionmanager/__init__.py b/manager/subscriptionmanager/__init__.py
index 4742e4b..dc96fb3 100644
--- a/manager/subscriptionmanager/__init__.py
+++ b/manager/subscriptionmanager/__init__.py
@@ -1,4 +1,4 @@
 
-from subscriptionmanager import SubscriptionManager
+from subscriptionmanager import SubscriptionManager, SubscriptionManagerError, SubscriptionManagerUnregisteredError
 
-__all__ = ['SubscriptionManager']
+__all__ = ['SubscriptionManager', 'SubscriptionManagerError', 'SubscriptionManagerUnregisteredError']
diff --git a/manager/subscriptionmanager/subscriptionmanager.py b/manager/subscriptionmanager/subscriptionmanager.py
index 657a160..312040b 100644
--- a/manager/subscriptionmanager/subscriptionmanager.py
+++ b/manager/subscriptionmanager/subscriptionmanager.py
@@ -24,15 +24,14 @@ import rhsm.connection as rhsm_connection
 import rhsm.certificate as rhsm_certificate
 import rhsm.config as rhsm_config
 
-from ..manager import Manager
+from ..manager import Manager, ManagerError, ManagerFatalError
 
 
-class SubscriptionManagerError(Exception):
-    def __init__(self, message):
-        self.message = message
+class SubscriptionManagerError(ManagerError):
+    pass
 
-    def __str__(self):
-        return self.message
+class SubscriptionManagerUnregisteredError(ManagerFatalError):
+    pass
 
 
 class SubscriptionManager(Manager):
@@ -75,7 +74,7 @@ class SubscriptionManager(Manager):
         else:
             self.logger.debug("Authenticating with certificate: %s" % self.cert_file)
             if not os.access(self.cert_file, os.R_OK):
-                raise SubscriptionManagerError("Unable to read certificate, system is not registered or you are not root")
+                raise SubscriptionManagerUnregisteredError("Unable to read certificate, system is not registered or you are not root")
             kwargs['cert_file'] = self.cert_file
             kwargs['key_file'] = self.key_file
 
diff --git a/virtwho.py b/virtwho.py
index b8c17b7..d2db309 100644
--- a/virtwho.py
+++ b/virtwho.py
@@ -29,7 +29,7 @@ import atexit
 
 from daemon import daemon
 from virt import Virt, DomainListReport, HostGuestAssociationReport
-from manager import Manager, ManagerError
+from manager import Manager, ManagerError, ManagerFatalError
 from config import Config, ConfigManager
 from password import InvalidKeyFile
 
@@ -106,6 +106,10 @@ class VirtWho(object):
                 self.logger.warn("Unable to handle report of type: %s", type(report))
         except ManagerError as e:
             self.logger.error("Unable to send data: %s" % str(e))
+        except ManagerFatalError as e:
+            # Something really bad happened (system is not register), stop the backends
+            self.logger.exception("Error in communication with subscription manager:")
+            raise
         except Exception as e:
             exceptionCheck(e)
             self.logger.exception("Error in communication with subscription manager:")
@@ -154,6 +158,7 @@ class VirtWho(object):
             oneshot_remaining = len(self.virts)
 
         if len(self.virts) == 0:
+            self.logger.error("No suitable virt backend found")
             return
 
         result = {}
@@ -180,7 +185,13 @@ class VirtWho(object):
                 if self.options.print_:
                     result[report.config] = report
                 else:
-                    self.send(report)
+                    try:
+                        self.send(report)
+                    except ManagerFatalError:
+                        # System not register (probably), stop the backends
+                        for virt in self.virts:
+                            virt.terminate()
+                        self.virts = []
 
             if self.options.oneshot:
                 oneshot_remaining -= 1
