commit 22c81d5ed84e8af7598fa32f9a9246487c5716b2
Author: Radek Novacek <rnovacek@redhat.com>
Date:   Thu May 14 13:45:27 2015 +0200

    Fix reloading and termination of processes

diff --git a/virt/esx/esx.py b/virt/esx/esx.py
index 8657e8c..b5756e9 100644
--- a/virt/esx/esx.py
+++ b/virt/esx/esx.py
@@ -64,7 +64,7 @@ class Esx(virt.Virt):
         self.vms = defaultdict(VM)
         start_time = end_time = datetime.now()
 
-        while self._oneshot or not self._terminate_event.is_set():
+        while self._oneshot or not self.is_terminated():
             delta = end_time - start_time
             # for python2.6, 2.7 has total_seconds method
             delta_seconds = ((delta.days * 86400 + delta.seconds) * 10**6 + delta.microseconds) / 10**6
diff --git a/virt/libvirtd/libvirtd.py b/virt/libvirtd/libvirtd.py
index 0c73ccb..22703db 100644
--- a/virt/libvirtd/libvirtd.py
+++ b/virt/libvirtd/libvirtd.py
@@ -146,7 +146,7 @@ class Libvirtd(virt.Virt):
 
         self.virt = None
 
-        while not self._terminate_event.is_set():
+        while not self.is_terminated():
             if self.virt is None:
                 self.virt = self._connect()
 
diff --git a/virt/virt.py b/virt/virt.py
index 57c2a86..b224b03 100644
--- a/virt/virt.py
+++ b/virt/virt.py
@@ -22,7 +22,7 @@ import sys
 import time
 import logging
 from datetime import datetime
-from multiprocessing import Process
+from multiprocessing import Process, Event
 
 class VirtError(Exception):
     pass
@@ -124,6 +124,7 @@ class Virt(Process):
     def __init__(self, logger, config):
         self.logger = logger
         self.config = config
+        self._internal_terminate_event = Event()
         super(Virt, self).__init__()
         self.daemon = True
 
@@ -160,8 +161,7 @@ class Virt(Process):
         be less often.
 
         If `oneshot` parameter is True, the data will be reported only once
-        and the process will be terminated after that. `interval` and
-        `terminate_event` parameters won't be used in that case.
+        and the process will be terminated after that.
         '''
         self._queue = queue
         self._terminate_event = terminate_event
@@ -198,19 +198,25 @@ class Virt(Process):
 
     def wait(self, wait_time):
         '''
-        Wait `wait_time` seconds, could be interrupted by setting _terminate_event.
+        Wait `wait_time` seconds, could be interrupted by setting _terminate_event or _internal_terminate_event.
         '''
         for i in range(wait_time):
-            if self._terminate_event.is_set():
+            if self.is_terminated():
                 break
             time.sleep(1)
 
+    def stop(self):
+        self._internal_terminate_event.set()
+
+    def is_terminated(self):
+        return self._internal_terminate_event.is_set() or self._terminate_event.is_set()
+
     def run(self):
         '''
         Wrapper around `_run` method that just catches the error messages.
         '''
         try:
-            while self._oneshot or not self._terminate_event.is_set():
+            while not self.is_terminated():
                 try:
                     self._run()
                 except VirtError as e:
@@ -222,7 +228,7 @@ class Virt(Process):
                     self._queue.put(ErrorReport(self.config))
                     return
 
-                if self._terminate_event.is_set():
+                if self.is_terminated():
                     return
 
                 self.logger.info("Waiting %s seconds before retrying backend '%s'" % (self._interval, self.config.name))
@@ -238,7 +244,7 @@ class Virt(Process):
         it's own way of waiting for changes (like event monitoring)
         '''
         self.prepare()
-        while self._oneshot or not self._terminate_event.is_set():
+        while not self.is_terminated():
             start_time = datetime.now()
             report = self._get_report()
             self._queue.put(report)
@@ -250,7 +256,7 @@ class Virt(Process):
 
             wait_time = self._interval - int(delta_seconds)
 
-            if wait_time <= 0:
+            if wait_time < 0:
                 self.logger.debug("Getting the host/guests association took too long, interval waiting is skipped")
                 continue
 
diff --git a/virtwho.py b/virtwho.py
index 01055ad..bcb150c 100644
--- a/virtwho.py
+++ b/virtwho.py
@@ -110,6 +110,13 @@ class VirtWho(object):
             # Something really bad happened (system is not register), stop the backends
             self.logger.exception("Error in communication with subscription manager:")
             raise
+        except IOError as e:
+            if e.errno == errno.EINTR:
+                self.logger.debug("Communication with subscription manager interrupted")
+                return False
+            exceptionCheck(e)
+            self.logger.exception("Error in communication with subscription manager:")
+            return False
         except Exception as e:
             exceptionCheck(e)
             self.logger.exception("Error in communication with subscription manager:")
@@ -200,7 +207,7 @@ class VirtWho(object):
                         self.logger.debug("Association for config %s gathered" % report.config.name)
                     for virt in self.virts:
                         if virt.config.name == report.config.name:
-                            virt.terminate()
+                            virt.stop()
                 except KeyError:
                     self.logger.debug("Association for config %s already gathered, ignoring" % report.config.name)
                 if not oneshot_remaining:
