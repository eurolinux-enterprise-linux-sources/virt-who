commit 2980cfae728fbcb3193c38c52a4efb2a9054197a
Author: Radek Novacek <rnovacek@redhat.com>
Date:   Thu Mar 31 13:41:52 2016 +0200

    ESX: fix logging out from hypervisor on exit

diff --git a/virt/esx/esx.py b/virt/esx/esx.py
index 7dee9ea..3adfcb5 100644
--- a/virt/esx/esx.py
+++ b/virt/esx/esx.py
@@ -108,10 +108,16 @@ class Esx(virt.Virt):
             except (suds.WebFault, HTTPException) as e:
                 suppress_exception = False
                 try:
-                    if hasattr(e, 'fault') and e.fault.faultstring == 'The session is not authenticated.':
-                        # Do not print the exception if we get 'not authenticated',
-                        # it's quite normal behaviour and nothing to worry about
-                        suppress_exception = True
+                    if hasattr(e, 'fault'):
+                        if e.fault.faultstring == 'The session is not authenticated.':
+                            # Do not print the exception if we get 'not authenticated',
+                            # it's quite normal behaviour and nothing to worry about
+                            suppress_exception = True
+                        if e.fault.faultstring == 'The task was canceled by a user.':
+                            # Do not print the exception if we get 'canceled by user',
+                            # this happens when the wait is terminated when
+                            # virt-who is being stopped
+                            continue
                 except Exception:
                     pass
                 if not suppress_exception:
@@ -258,6 +264,7 @@ class Esx(virt.Virt):
         try:
             if self.sc:
                 self.client.service.Logout(_this=self.sc.sessionManager)
+                self.sc = None
         except Exception as e:
             self.logger.info("Can't log out from ESX: %s", str(e))
 
diff --git a/virt/virt.py b/virt/virt.py
index 69c8621..834fdfc 100644
--- a/virt/virt.py
+++ b/virt/virt.py
@@ -365,7 +365,7 @@ class Virt(Process):
         self.logger.debug("Virt backend '%s' started", self.config.name)
         # Reset the signal handlers, we'll handle them only in the main thread
         signal.signal(signal.SIGHUP, signal.SIG_DFL)
-        signal.signal(signal.SIGTERM, signal.SIG_DFL)
+        signal.signal(signal.SIGTERM, lambda *a: self.cleanup())
         try:
             while not self.is_terminated():
                 has_error = False
diff --git a/virtwho.py b/virtwho.py
index a08616b..c409d48 100644
--- a/virtwho.py
+++ b/virtwho.py
@@ -351,6 +351,7 @@ class VirtWho(object):
 
     def stop_virts(self):
         for virt in self.virts:
+            virt.stop()
             virt.terminate()
             virt.join()
         self.virts = []
