commit 742cc2e386920d7f3c8c8fee1da3019a8738ef4c
Author: Radek Novacek <rnovacek@redhat.com>
Date:   Thu Apr 2 14:58:09 2015 +0200

    Don't fail when the encryption key doesn't exist

diff --git a/config.py b/config.py
index b8807f8..e6edff5 100644
--- a/config.py
+++ b/config.py
@@ -41,7 +41,11 @@ def parse_list(s):
     return reader([s]).next()
 
 class Config(object):
-    def __init__(self, name, type, server=None, username=None, password=None, owner=None, env=None, rhsm_username=None, rhsm_password=None):
+    def __init__(self, name, type, server=None, username=None,
+                 password=None, owner=None, env=None,
+                 rhsm_username=None, rhsm_password=None,
+                 encrypted_password=None, encrypted_rhsm_password=None):
+
         self._name = name
         self._type = type
         if self._type not in VIRTWHO_TYPES:
@@ -52,10 +56,12 @@ class Config(object):
             self._server = server
         self._username = username
         self._password = password
+        self._encrypted_password = encrypted_password
         self._owner = owner
         self._env = env
         self._rhsm_username = rhsm_username
         self._rhsm_password = rhsm_password
+        self._encrypted_rhsm_password = encrypted_rhsm_password
 
         self.filter_host_uuids = []
         self.exclude_host_uuids = []
@@ -91,12 +97,11 @@ class Config(object):
             password = parser.get(name, "password")
         except NoOptionError:
             password = None
-        if password is None:
-            try:
-                crypted = parser.get(name, "encrypted_password")
-                password = Password.decrypt(unhexlify(crypted))
-            except NoOptionError:
-                password = None
+
+        try:
+            encrypted_password = parser.get(name, "encrypted_password")
+        except NoOptionError:
+            encrypted_password = None
 
         try:
             owner = parser.get(name, "owner")
@@ -118,14 +123,19 @@ class Config(object):
             rhsm_password = None
 
         # Only attempt to get the encrypted rhsm password if we have a username:
+        encrypted_rhsm_password = None
         if rhsm_username is not None and rhsm_password is None:
             try:
-                crypted = parser.get(name, "rhsm_encrypted_password")
-                rhsm_password = Password.decrypt(unhexlify(crypted))
+                encrypted_rhsm_password = parser.get(name, "rhsm_encrypted_password")
             except NoOptionError:
-                rhsm_password = None
+                pass
 
-        config = Config(name, type, server, username, password, owner, env, rhsm_username, rhsm_password)
+        config = Config(name=name, type=type, server=server, username=username,
+                        password=password, owner=owner, env=env,
+                        rhsm_username=rhsm_username,
+                        rhsm_password=rhsm_password,
+                        encrypted_password=encrypted_password,
+                        encrypted_rhsm_password=encrypted_rhsm_password)
 
         try:
             config.hypervisor_id = parser.get(name, "hypervisor_id")
@@ -183,7 +193,12 @@ class Config(object):
 
     @property
     def password(self):
-        return self._password
+        if self._password is not None:
+            return self._password
+        elif self._encrypted_password is not None:
+            return Password.decrypt(unhexlify(self._encrypted_password))
+        else:
+            return None
 
     @property
     def owner(self):
@@ -199,11 +214,18 @@ class Config(object):
 
     @property
     def rhsm_password(self):
-        return self._rhsm_password
+        if self._rhsm_password is not None:
+            return self._rhsm_password
+        elif self._encrypted_rhsm_password is not None:
+            return Password.decrypt(unhexlify(self._encrypted_rhsm_password))
+        else:
+            return None
 
 
 class ConfigManager(object):
-    def __init__(self, config_dir=VIRTWHO_CONF_DIR):
+    def __init__(self, config_dir=None):
+        if config_dir is None:
+            config_dir = VIRTWHO_CONF_DIR
         parser = SafeConfigParser()
         self._configs = []
         try:
diff --git a/tests/test_config.py b/tests/test_config.py
index 23cab55..d570669 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -24,7 +24,7 @@ import shutil
 from config import ConfigManager, InvalidOption
 from tempfile import mkdtemp
 from base import TestBase, unittest
-from binascii import hexlify
+from binascii import hexlify, unhexlify
 from mock import patch
 
 
@@ -123,6 +123,13 @@ env=staging
         self.assertEqual(len(manager.configs), 1)
         self.assertEqual(manager.configs[0].password, passwd)
 
+    def testCryptedPasswordWithoutKey(self):
+        from password import Password, InvalidKeyFile
+        Password.KEYFILE = "/some/nonexistant/file"
+        passwd = "TestSecretPassword!"
+        with self.assertRaises(InvalidKeyFile):
+            Password.decrypt(unhexlify("06a9214036b8a15b512e03d534120006"))
+
     def testNoOptionsConfig(self):
         with open(os.path.join(self.config_dir, "test.conf"), "w") as f:
             f.write("""
diff --git a/tests/test_virtwho.py b/tests/test_virtwho.py
index 20f1f55..2e6cff1 100644
--- a/tests/test_virtwho.py
+++ b/tests/test_virtwho.py
@@ -160,7 +160,7 @@ class TestOptions(TestBase):
         options.oneshot = True
         options.interval = 0
         options.print_ = False
-        virtwho = VirtWho(self.logger, options)
+        virtwho = VirtWho(self.logger, options, config_dir="/nonexistant")
         config = Config("test", "esx", "localhost", "username", "password", "owner", "env")
         virtwho.configManager.addConfig(config)
         virtwho.queue.put(HostGuestAssociationReport(config, {'a': ['b']}))
diff --git a/virtwho.py b/virtwho.py
index cbea034..c501911 100644
--- a/virtwho.py
+++ b/virtwho.py
@@ -65,7 +65,7 @@ SAT6 = "sam"
 
 
 class VirtWho(object):
-    def __init__(self, logger, options):
+    def __init__(self, logger, options, config_dir=None):
         """
         VirtWho class provides bridge between virtualization supervisor and
         Subscription Manager.
@@ -79,7 +79,7 @@ class VirtWho(object):
         # Queue for getting events from virt backends
         self.queue = Queue()
 
-        self.configManager = ConfigManager()
+        self.configManager = ConfigManager(config_dir)
         for config in self.configManager.configs:
             logger.debug("Using config named '%s'" % config.name)
 
@@ -133,7 +133,11 @@ class VirtWho(object):
         # Run the virtualization backends
         self.virts = []
         for config in self.configManager.configs:
-            virt = Virt.fromConfig(self.logger, config)
+            try:
+                virt = Virt.fromConfig(self.logger, config)
+            except Exception as e:
+                self.logger.error('Unable to use configuration "%s": %s' % (config.name, str(e)))
+                continue
             # Run the process
             virt.start(self.queue, self.terminate_event, self.options.interval, self.options.oneshot)
             self.virts.append(virt)
@@ -141,6 +145,9 @@ class VirtWho(object):
         if self.options.oneshot:
             oneshot_remaining = len(self.virts)
 
+        if len(self.virts) == 0:
+            return
+
         result = {}
         while not self.terminate_event.is_set():
             # Wait for incoming report from virt backend
@@ -461,7 +468,10 @@ def _main(logger, options):
                         options.username, options.password, options.owner, options.env)
         virtWho.configManager.addConfig(config)
     for conffile in options.configs:
-        virtWho.configManager.readFile(conffile)
+        try:
+            virtWho.configManager.readFile(conffile)
+        except Exception as e:
+            logger.error('Config file "%s" skipped because of an error: %s' % (conffile, str(e)))
     if len(virtWho.configManager.configs) == 0:
         # In order to keep compatibility with older releases of virt-who,
         # fallback to using libvirt as default virt backend
